config {
  type: "table"
}

with connector as (
    
    select * 
    from ${ ref('fivetran_log__connector_status') }
),

-- grab api calls, schema changes, and record modifications
log_events as (

    select 
        connector_id,
        -- cast( {{ dbt.date_trunc('day', 'created_at') }} as date) as date_day,
        cast( date_trunc(created_at, day) as date) as date_day,
        case 
            when event_subtype in ('create_table', 'alter_table', 'create_schema', 'change_schema_config') then 'schema_change' 
            else event_subtype end as event_subtype,

        -- sum(case when event_subtype = 'records_modified' then cast( {{ fivetran_utils.json_parse(string='message_data', string_path=['count']) }} as {{ dbt.type_int()}} )
        sum(case when event_subtype = 'records_modified' then cast( JSON_QUERY(message_data, '$.count') AS INT64 )
        else 1 end) as count_events 

    from ${ ref('stg_fivetran_log__log') }

    where event_subtype in ('api_call', 
                            'records_modified', 
                            'create_table', 'alter_table', 'create_schema', 'change_schema_config') -- all schema changes
                            
        and connector_id is not null

    group by 1,2,3
),

pivot_out_events as (

    select
        connector_id,
        date_day,
        max(case when event_subtype = 'api_call' then count_events else 0 end) as count_api_calls,
        max(case when event_subtype = 'records_modified' then count_events else 0 end) as count_record_modifications,
        max(case when event_subtype = 'schema_change' then count_events else 0 end) as count_schema_changes

    from log_events
    group by 1,2
),

connector_event_counts as (

    select
        pivot_out_events.date_day,
        pivot_out_events.count_api_calls,
        pivot_out_events.count_record_modifications,
        pivot_out_events.count_schema_changes,
        connector.connector_name,
        connector.connector_id,
        connector.connector_type,
        connector.destination_name,
        connector.destination_id,
        connector.set_up_at
    from
    connector left join pivot_out_events 
        on pivot_out_events.connector_id = connector.connector_id
),

js {
    function spine (date) {
        query = `
                with rawdata as (
                    with p as (
                        select
                            0 as generated_number
                        union
                        all
                        select
                            1
                    ),
                    unioned as (
                        select
                            p0.generated_number * power(2, 0) + p1.generated_number * power(2, 1) + p2.generated_number * power(2, 2) + p3.generated_number * power(2, 3) + p4.generated_number * power(2, 4) + 1 as generated_number
                        from
                            p as p0
                            cross join p as p1
                            cross join p as p2
                            cross join p as p3
                            cross join p as p4
                    )
                    select
                        *
                    from
                        unioned
                    where
                        generated_number <= 21
                    order by
                        generated_number
                ),
                all_periods as (
                    select
                        (
                            datetime_add(
                                cast(cast((select min( signed_up ) as min_date from ${constants.SOURCE_PROJECT}.${constants.SOURCE_DATASET}.connector) as date) as datetime),
                                interval row_number() over (
                                    order by
                                        1
                                ) - 1 day
                            )
                        ) as date_day
                    from
                        rawdata
                ),
                filtered as (
                    select
                        *
                    from
                        all_periods
                    where
                        date_day <= datetime_add(
                            cast(
                                timestamp_trunc(
                                    cast(current_timestamp as timestamp),
                                    day
                                ) as datetime
                            ),
                            interval 1 week
                        )
                )
                select
                    *
                from
                    filtered
        
        `;
        return query;
    }
}

spine as (
    ${spine(`select  min( signed_up ) as min_date from sample1-328718.fivetran_log.connector`)}

    -- {% if execute %}
    -- {% set first_date_query %}
    --     select  min( signed_up ) as min_date from {{ var('connector') }}
    -- {% endset %}
    -- {% set first_date = run_query(first_date_query).columns[0][0]|string %}
    
    -- {% else %} {% set first_date = "2016-01-01" %}
    -- {% endif %}

    -- {{ dbt_utils.date_spine(
    --     datepart = "day", 
    --     start_date =  "cast('" ~ first_date[0:10] ~ "' as date)", 
    --     end_date = dbt.dateadd("week", 1, dbt.date_trunc('day', dbt.current_timestamp_backcompat())) 
    --     ) 
    -- }} 
),

connector_event_history as (

    select
        cast(spine.date_day as date) as date_day,
        connector_event_counts.connector_name,
        connector_event_counts.connector_id,
        connector_event_counts.connector_type,
        connector_event_counts.destination_name,
        connector_event_counts.destination_id,
        max(case 
            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_api_calls
            else 0
        end) as count_api_calls,
        max(case 
            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_record_modifications
            else 0
        end) as count_record_modifications,
        max(case 
            when cast(spine.date_day as date) = connector_event_counts.date_day then connector_event_counts.count_schema_changes
            else 0
        end) as count_schema_changes
    from
    spine join connector_event_counts
        -- on spine.date_day  >= cast( {{ dbt.date_trunc('day', 'connector_event_counts.set_up_at') }} as date)
        on spine.date_day  >= cast( date_trunc(connector_event_counts.set_up_at, day) as date  )


    group by 1,2,3,4,5,6
),

-- now rejoin spine to get a complete calendar
join_event_history as (
    
    select
        spine.date_day,
        connector_event_history.connector_name,
        connector_event_history.connector_id,
        connector_event_history.connector_type,
        connector_event_history.destination_name,
        connector_event_history.destination_id,
        max(connector_event_history.count_api_calls) as count_api_calls,
        max(connector_event_history.count_record_modifications) as count_record_modifications,
        max(connector_event_history.count_schema_changes) as count_schema_changes

    from
    spine left join connector_event_history
        on cast(spine.date_day as date) = connector_event_history.date_day

    group by 1,2,3,4,5,6
),

final as (

    select *
    from join_event_history

    -- where cast(date_day as timestamp) <= {{ dbt.current_timestamp_backcompat() }}
    where cast(date_day as timestamp) <= CURRENT_TIMESTAMP()

    order by date_day desc
)

select *
from final
